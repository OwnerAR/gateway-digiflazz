---
alwaysApply: true
---

# Digiflazz Gateway API - Golang Project Rules

## Project Overview
Aplikasi gateway untuk integrasi API transaksi ke Digiflazz menggunakan Golang. Aplikasi ini berfungsi sebagai middleware yang menghubungkan sistem internal dengan API Digiflazz untuk berbagai layanan seperti pulsa, token listrik, PDAM, dll.

## API Documentation Reference
- **Official Documentation**: https://developer.digiflazz.com/api/
- **IP Whitelist**: 52.74.250.133
- **Request Format**: JSON
- **HTTP Method**: POST

## Project Structure Guidelines

### Directory Structure
```
gateway-digiflazz/
├── cmd/                    # Application entry points
│   └── server/
│       └── main.go
├── internal/               # Private application code
│   ├── config/            # Configuration management
│   ├── handlers/          # HTTP handlers
│   ├── services/          # Business logic
│   ├── models/            # Data models
│   ├── repositories/      # Data access layer
│   └── middleware/        # HTTP middleware
├── pkg/                   # Public library code
│   ├── digiflazz/         # Digiflazz API client
│   ├── cache/             # Cache implementations (SQLite, Redis)
│   └── utils/             # Utility functions
├── scripts/               # Build and deployment scripts
│   ├── build-*.sh         # Cross-platform build scripts
│   ├── test-*.bat         # Windows testing scripts
│   ├── setup-*.sh         # Setup and configuration scripts
│   └── debug-*.ps1        # PowerShell debugging scripts
├── docs/                  # Documentation
│   ├── api-reference.md   # API documentation
│   ├── windows-troubleshooting.md
│   ├── cache-behavior-fix.md
│   └── permanent-cache-implementation.md
├── .github/               # GitHub Actions workflows
│   └── workflows/
│       ├── build-all-platforms.yml
│       └── release.yml
├── data/                  # Runtime data directory
├── build/                 # Build output directory
├── go.mod
├── go.sum
├── Makefile               # Build automation
├── Dockerfile             # Container configuration
└── README.md
```

## Coding Standards

### 1. Go Code Style
- Follow standard Go formatting with `gofmt`
- Use meaningful variable and function names
- Write comprehensive comments for exported functions
- Use interfaces for dependency injection
- Implement proper error handling

### 2. API Design Patterns
- Use clean architecture principles
- Implement repository pattern for data access
- Use service layer for business logic
- Implement proper logging and monitoring

### 3. Digiflazz API Integration
- Implement all required API endpoints:
  - **Buyer APIs**: Cek Saldo, Cek Harga, Deposit, Request (Prabayar/Pascabayar)
  - **Seller APIs**: Request/Response handling, Custom Response
- Support both Prabayar and Pascabayar transactions
- Implement proper signature generation for authentication
- Handle webhooks and callbacks

## Key Features to Implement

### 1. Core Services
- **Balance Check**: Cek saldo akun
- **Price List**: Daftar harga produk
- **Deposit Management**: Kelola deposit
- **Transaction Processing**: Topup, pembayaran tagihan
- **Status Checking**: Cek status transaksi
- **Webhook Handling**: Proses callback dari Digiflazz
- **PLN Inquiry**: Cek data pelanggan PLN dengan permanent caching
- **Pascabayar Services**: Pembayaran tagihan (PLN, PDAM, Telkom, dll)

### 2. Supported Providers
- **Prabayar**: Pulsa, Token Listrik, Game Voucher
- **Pascabayar**: PLN, PDAM, Telkom, dll
- **Multi-Provider Support**: IRS, FM, Otomax, ST24, Payuni, Sipas, Tiger

### 3. Security & Authentication
- Implement proper API key management
- Use secure signature generation
- Implement rate limiting
- Add request validation and sanitization

## Configuration Management

### Environment Variables
```bash
# Digiflazz API Configuration
DIGIFLAZZ_USERNAME=your_username
DIGIFLAZZ_API_KEY=your_api_key
DIGIFLAZZ_BASE_URL=https://api.digiflazz.com
DIGIFLAZZ_TIMEOUT=30s
DIGIFLAZZ_RETRY_ATTEMPTS=3
DIGIFLAZZ_IP_WHITELIST=52.74.250.133

# Server Configuration
SERVER_PORT=8080
SERVER_HOST=0.0.0.0
LOG_LEVEL=info

# Cache Configuration
CACHE_DB_PATH=./data/cache.db

# Otomax Configuration
OTOMAX_SECRET_KEY=default-secret-key
OTOMAX_CALLBACK_URL=http://localhost:8080/otomax/callback

# Database Configuration (if needed)
DB_HOST=localhost
DB_PORT=5432
DB_NAME=digiflazz_gateway
DB_USER=your_db_user
DB_PASSWORD=your_db_password

# Redis Configuration (alternative cache)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
```

## Error Handling Standards

### 1. Digiflazz Error Codes
- Implement proper mapping of Digiflazz response codes
- Handle timeout and network errors gracefully
- Implement retry mechanism for failed requests
- Log all API interactions for debugging
- Handle IP whitelist errors specifically
- Validate empty responses from Digiflazz API
- Implement customer number format validation

### 2. Custom Error Types
```go
type DigiflazzError struct {
    Code    string `json:"code"`
    Message string `json:"message"`
    Details string `json:"details,omitempty"`
}
```

## Testing Requirements

### 1. Unit Tests
- Test all service methods
- Mock external API calls
- Test error scenarios
- Achieve minimum 80% code coverage

### 2. Integration Tests
- Test actual Digiflazz API integration
- Test webhook handling
- Test transaction flows end-to-end

### 3. Test Cases
- Use Digiflazz test cases from documentation
- Test both success and failure scenarios
- Validate response formats

## Logging and Monitoring

### 1. Structured Logging
- Use JSON format for logs
- Include request/response IDs
- Log all API calls to Digiflazz
- Implement log levels (DEBUG, INFO, WARN, ERROR)
- Log platform information (OS/Architecture)
- Log User-Agent headers for debugging
- Log raw API responses for troubleshooting
- Log cache hit/miss statistics
- **Cache Debug Logging**: Detailed logging for cache operations (retrieval, storage, expiration checks)
- **Cache Key Tracking**: Log cache keys and customer numbers for debugging
- **Cache Data Validation**: Log cache data length and structure validation

### 2. Metrics and Monitoring
- Track API response times
- Monitor success/failure rates
- Alert on high error rates
- Track transaction volumes

## Security Best Practices

### 1. API Security
- Validate all incoming requests
- Implement proper authentication
- Use HTTPS for all communications
- Sanitize user inputs

### 2. Data Protection
- Encrypt sensitive data at rest
- Use secure key management
- Implement proper access controls
- Regular security audits

## Deployment Guidelines

### 1. Containerization
- Use Docker for containerization
- Create multi-stage builds
- Optimize image size
- Use non-root user
- **Windows CGO Support**: Build Windows binaries with CGO enabled for SQLite
- **Cross-Platform Builds**: Support Linux, Windows, macOS builds
- **GitHub Actions**: Automated CI/CD with multi-platform builds

### 2. Environment Setup
- Development, staging, production environments
- Proper configuration management
- Database migrations
- Health checks

## Documentation Requirements

### 1. API Documentation
- Document all endpoints
- Include request/response examples
- Document error codes
- Provide integration guides

### 2. Code Documentation
- README with setup instructions
- Code comments for complex logic
- Architecture diagrams
- Deployment guides

## Performance Optimization

### 1. Caching Strategy
- Cache price lists
- Cache balance information
- Implement cache invalidation
- Use Redis for distributed caching
- **PLN Inquiry Permanent Cache**: Cache PLN customer data permanently (no TTL)
- **SQLite Cache**: Local file-based cache for single-instance deployments
- **Cache Consistency**: Ensure consistent response format between cache hit/miss
- **Cache Statistics**: Track cache hit/miss rates and performance metrics
- **Cache Key Format**: `pln_inquiry:{customer_no}` for PLN inquiry cache
- **Timezone Handling**: SQLite cache handles timezone format for permanent cache (`LIKE '0001-01-01%'`)
- **Cache Debugging**: Comprehensive debug logging for cache operations troubleshooting

### 2. Database Optimization
- Proper indexing
- Query optimization
- Connection pooling
- Transaction management

## Compliance and Standards

### 1. Go Best Practices
- Follow Go idioms and conventions
- Use proper package organization
- Implement proper error handling
- Use context for cancellation

### 2. API Standards
- RESTful API design
- Proper HTTP status codes
- Consistent response formats
- API versioning strategy

## Build and Testing

### 1. Build System
- **Makefile**: Centralized build automation
- **Cross-Platform Builds**: Linux, Windows, macOS support
- **CGO Support**: SQLite integration with CGO enabled
- **Windows Build**: Wine-based cross-compilation for Windows
- **Docker Support**: Containerized builds for consistency

### 2. Testing Framework
- **Unit Tests**: Test all service methods and handlers
- **Integration Tests**: Test Digiflazz API integration
- **Cache Testing**: Test cache behavior and consistency
- **Windows Testing**: Batch files and PowerShell scripts
- **API Testing**: Automated endpoint testing

### 3. Build Commands
```bash
# Build for all platforms
make build-all

# Build Windows with CGO
make build-windows-cgo

# Test Windows binary
make test-windows-fixed

# Test cache behavior
make test-cache-behavior

# Test cache with debug logging
make test-cache-debug

# Check cache database contents
make check-cache-db

# Debug Windows issues
make debug-windows
```

## Development Workflow

### 1. Git Workflow
- Use feature branches
- Implement proper commit messages
- Code review process
- Automated testing in CI/CD

### 2. Code Quality
- Use linters (golangci-lint)
- Implement pre-commit hooks
- Code formatting with gofmt
- Static analysis tools
- **Build Automation**: Makefile with targets for build, test, and deployment
- **Testing Scripts**: Windows batch files and PowerShell scripts for testing
- **Cross-Platform Testing**: Test on multiple operating systems

## Troubleshooting and Known Issues

### 1. Windows Build Issues
- **CGO Cross-Compilation**: Use Wine or native Windows build
- **IP Whitelist Errors**: Ensure server IP is registered with Digiflazz
- **Empty Responses**: Check timeout and retry configuration
- **Cache Path Issues**: Use absolute paths for Windows compatibility

### 2. PLN Inquiry Issues
- **Empty Response**: Validate customer number format (10-15 digits)
- **Cache Inconsistency**: Ensure proper ref_id mapping
- **Permanent Cache**: PLN data cached without expiration
- **Response Format**: Consistent structure between cache hit/miss
- **Cache Miss Repeated**: Fixed SQLite timezone format issue (`LIKE '0001-01-01%'`)
- **Cache Debug Logging**: Enable `LOG_LEVEL=debug` for detailed cache troubleshooting
- **Function Signature**: `InquiryPLN(req, refID)` uses 2 parameters for flexibility

### 3. Common Solutions
```bash
# Set proper environment variables
set DIGIFLAZZ_TIMEOUT=30s
set DIGIFLAZZ_RETRY_ATTEMPTS=3
set LOG_LEVEL=debug

# Clear cache if needed
del data\cache.db

# Test with debug logging
make test-windows-fixed

# Test cache behavior with debug logging
make test-cache-debug

# Check cache database contents
make check-cache-db
```

### 4. Cache Troubleshooting Commands
```bash
# Debug cache with detailed logging
scripts/test-cache-debug-detailed.bat

# Check cache database directly
scripts/check-cache-db.bat

# Test PLN inquiry with proper configuration
make test-pln-inquiry-windows

# Debug Windows configuration
make debug-config-windows
```

## Maintenance and Updates

### 1. Regular Updates
- Keep dependencies updated
- Monitor Digiflazz API changes
- Regular security patches
- Performance monitoring

### 2. Backup and Recovery
- Database backups
- Configuration backups
- Disaster recovery plan
- Data retention policies

## GitHub Actions and Release Management

### 1. CI/CD Workflows
- **build-all-platforms.yml**: Build for Linux, Windows, macOS
- **release.yml**: Automated release creation with artifacts
- **Multi-Platform Builds**: Native runners for each platform
- **Artifact Management**: Automated upload and download

### 2. Release Process
```bash
# Create and push tag
git tag -a v1.0.0 -m "Release v1.0.0"
git push origin v1.0.0

# Or use GitHub Actions manual dispatch
# Go to Actions → "Create Release" → Run workflow
```

### 3. Build Matrix
- **Linux**: amd64 (ARM64 disabled due to CGO issues)
- **Windows**: amd64 with CGO enabled
- **macOS**: amd64 and arm64

---

**Note**: This project rule document should be updated as the project evolves and new requirements are identified. Always refer to the official Digiflazz documentation for the most current API specifications.

**Last Updated**: October 2025 - Added Windows CGO support, permanent caching, enhanced error handling, comprehensive testing framework, and fixed PLN inquiry cache timezone issues with detailed debug logging.