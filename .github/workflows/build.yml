name: Cross-Platform Build

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  BINARY_NAME: 'gateway-digiflazz'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run tests with coverage
        run: go test -v -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64, arm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build for Linux ${{ matrix.arch }}
        run: |
          GOOS=linux GOARCH=${{ matrix.arch }} go build \
            -ldflags "-X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o ${{ env.BINARY_NAME }}-linux-${{ matrix.arch }} \
            ./cmd/server

      - name: Upload Linux ${{ matrix.arch }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-linux-${{ matrix.arch }}
          path: ${{ env.BINARY_NAME }}-linux-${{ matrix.arch }}

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build for Windows ${{ matrix.arch }}
        run: |
          $env:GOOS="windows"
          $env:GOARCH="${{ matrix.arch }}"
          go build `
            -ldflags "-X main.version=${{ github.ref_name }} -X main.buildTime=$(Get-Date -Format 'yyyy-MM-ddTHH:mm:ssZ')" `
            -o "${{ env.BINARY_NAME }}-windows-${{ matrix.arch }}.exe" `
            ./cmd/server

      - name: Upload Windows ${{ matrix.arch }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-windows-${{ matrix.arch }}
          path: ${{ env.BINARY_NAME }}-windows-${{ matrix.arch }}.exe

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build for macOS ${{ matrix.arch }}
        run: |
          GOOS=darwin GOARCH=${{ matrix.arch }} go build \
            -ldflags "-X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o ${{ env.BINARY_NAME }}-darwin-${{ matrix.arch }} \
            ./cmd/server

      - name: Upload macOS ${{ matrix.arch }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-darwin-${{ matrix.arch }}
          path: ${{ env.BINARY_NAME }}-darwin-${{ matrix.arch }}

  build-freebsd:
    name: Build FreeBSD
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build for FreeBSD ${{ matrix.arch }}
        run: |
          GOOS=freebsd GOARCH=${{ matrix.arch }} go build \
            -ldflags "-X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o ${{ env.BINARY_NAME }}-freebsd-${{ matrix.arch }} \
            ./cmd/server

      - name: Upload FreeBSD ${{ matrix.arch }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-freebsd-${{ matrix.arch }}
          path: ${{ env.BINARY_NAME }}-freebsd-${{ matrix.arch }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.BINARY_NAME }}:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.BINARY_NAME }}:latest

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos, build-freebsd]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release archives
        run: |
          mkdir -p release
          
          # Linux
          for arch in amd64 arm64 arm; do
            if [ -f "${{ env.BINARY_NAME }}-linux-$arch" ]; then
              tar -czf "release/${{ env.BINARY_NAME }}-linux-$arch.tar.gz" "${{ env.BINARY_NAME }}-linux-$arch"
            fi
          done
          
          # Windows
          for arch in amd64 arm64; do
            if [ -f "${{ env.BINARY_NAME }}-windows-$arch.exe" ]; then
              zip "release/${{ env.BINARY_NAME }}-windows-$arch.zip" "${{ env.BINARY_NAME }}-windows-$arch.exe"
            fi
          done
          
          # macOS
          for arch in amd64 arm64; do
            if [ -f "${{ env.BINARY_NAME }}-darwin-$arch" ]; then
              tar -czf "release/${{ env.BINARY_NAME }}-darwin-$arch.tar.gz" "${{ env.BINARY_NAME }}-darwin-$arch"
            fi
          done
          
          # FreeBSD
          for arch in amd64 arm64; do
            if [ -f "${{ env.BINARY_NAME }}-freebsd-$arch" ]; then
              tar -czf "release/${{ env.BINARY_NAME }}-freebsd-$arch.tar.gz" "${{ env.BINARY_NAME }}-freebsd-$arch"
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



