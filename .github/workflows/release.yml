name: Create Release

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Build Linux AMD64
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        mkdir -p build
        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
          -ldflags "-X main.version=$VERSION -X main.buildTime=$BUILD_TIME" \
          -o "build/gateway-digiflazz-linux-amd64" ./cmd/server
        
    - name: Create Linux archive
      run: |
        tar -czf "build/gateway-digiflazz-linux-amd64.tar.gz" -C build "gateway-digiflazz-linux-amd64"
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: gateway-digiflazz-linux-amd64
        path: build/gateway-digiflazz-linux-amd64.tar.gz

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Build Windows AMD64
      run: |
        $version = "${{ github.event.inputs.version || github.ref_name }}"
        $buildTime = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
        
        New-Item -ItemType Directory -Path "build" -Force
        go build -ldflags "-X main.version=$version -X main.buildTime=$buildTime" -o "build/gateway-digiflazz-windows-amd64.exe" ./cmd/server
        
    - name: Create Windows archive
      run: |
        Compress-Archive -Path "build\gateway-digiflazz-windows-amd64.exe" -DestinationPath "build\gateway-digiflazz-windows-amd64.zip"
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: gateway-digiflazz-windows-amd64
        path: build/gateway-digiflazz-windows-amd64.zip

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Build macOS ${{ matrix.arch }}
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name }}"
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        mkdir -p build
        go build -ldflags "-X main.version=$VERSION -X main.buildTime=$BUILD_TIME" -o "build/gateway-digiflazz-darwin-${{ matrix.arch }}" ./cmd/server
        
    - name: Create macOS archive
      run: |
        tar -czf "build/gateway-digiflazz-darwin-${{ matrix.arch }}.tar.gz" -C build "gateway-digiflazz-darwin-${{ matrix.arch }}"
        
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: gateway-digiflazz-darwin-${{ matrix.arch }}
        path: build/gateway-digiflazz-darwin-${{ matrix.arch }}.tar.gz

  create-release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: Release ${{ github.event.inputs.version || github.ref_name }}
        body: |
          ## Digiflazz Gateway API Server
          
          ### What's Changed
          - Windows build with CGO support for SQLite
          - Command line flags support (--help, --version, --config)
          - Cross-platform builds for Linux, Windows, and macOS
          - GitHub Actions CI/CD pipeline
          - PLN Inquiry permanent caching with SQLite
          - Fixed cache timezone format issue for Windows compatibility
          - Enhanced debug logging for cache operations
          - Comprehensive troubleshooting scripts for Windows
          - Digiflazz API client improvements with proper timeout/retry configuration
          
          ### Downloads
          - **Linux AMD64**: gateway-digiflazz-linux-amd64.tar.gz
          - **Windows AMD64**: gateway-digiflazz-windows-amd64.zip
          - **macOS AMD64**: gateway-digiflazz-darwin-amd64.tar.gz
          - **macOS ARM64**: gateway-digiflazz-darwin-arm64.tar.gz
          
          ### Usage
          ```bash
          # Linux
          tar -xzf gateway-digiflazz-linux-amd64.tar.gz
          ./gateway-digiflazz-linux-amd64 -help
          
          # Windows
          unzip gateway-digiflazz-windows-amd64.zip
          .\gateway-digiflazz-windows-amd64.exe -help
          
          # macOS
          tar -xzf gateway-digiflazz-darwin-amd64.tar.gz
          ./gateway-digiflazz-darwin-amd64 -help
          ```
          
          ### Configuration
          Set environment variables for optimal performance:
          ```bash
          # Digiflazz API Configuration
          DIGIFLAZZ_TIMEOUT=30s
          DIGIFLAZZ_RETRY_ATTEMPTS=3
          DIGIFLAZZ_BASE_URL=https://api.digiflazz.com
          
          # Debug logging for troubleshooting
          LOG_LEVEL=debug
          ```
          
          ### Requirements
          - CGO enabled for SQLite support
          - Windows: Visual C++ Redistributable
          - Linux/macOS: Standard C library
          
          ### Troubleshooting
          For Windows users experiencing cache issues:
          ```bash
          # Set proper environment variables
          set DIGIFLAZZ_TIMEOUT=30s
          set DIGIFLAZZ_RETRY_ATTEMPTS=3
          set LOG_LEVEL=debug
          
          # Clear cache if needed
          del data\cache.db
          ```
          
          ### Features
          - **PLN Inquiry API**: Permanent caching for static customer data
          - **Cache Management**: SQLite-based local cache with debug logging
          - **Cross-Platform**: Native builds for Windows, Linux, and macOS
          - **Digiflazz Integration**: Full API support with proper error handling
          - **Otomax Compatibility**: Seamless integration with Otomax systems
        files: |
          **/*.tar.gz
          **/*.zip
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true
        overwrite: true
