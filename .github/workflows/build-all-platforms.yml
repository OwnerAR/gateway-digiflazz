name: Build All Platforms

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag'
        required: false
        default: 'latest'

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64]  # Only amd64 for now, arm64 has CGO cross-compilation issues
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Set up CGO environment
      run: |
        echo "CGO_ENABLED=1" >> $GITHUB_ENV
        echo "GOOS=linux" >> $GITHUB_ENV
        echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV
        
    - name: Build for Linux ${{ matrix.arch }}
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name || 'latest' }}"
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        mkdir -p build
        go build -ldflags "-X main.version=$VERSION -X main.buildTime=$BUILD_TIME" -o "build/gateway-digiflazz-linux-${{ matrix.arch }}" ./cmd/server
        
    - name: Test binary
      run: |
        chmod +x build/gateway-digiflazz-linux-${{ matrix.arch }}
        ./build/gateway-digiflazz-linux-${{ matrix.arch }} -help
        
    - name: Create archive
      run: |
        tar -czf "build/gateway-digiflazz-linux-${{ matrix.arch }}.tar.gz" -C build "gateway-digiflazz-linux-${{ matrix.arch }}"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gateway-digiflazz-linux-${{ matrix.arch }}
        path: |
          build/gateway-digiflazz-linux-${{ matrix.arch }}
          build/gateway-digiflazz-linux-${{ matrix.arch }}.tar.gz

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64]  # Only amd64 for now, 386 has compatibility issues
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Set up CGO environment
      run: |
        echo "CGO_ENABLED=1" >> $env:GITHUB_ENV
        echo "GOOS=windows" >> $env:GITHUB_ENV
        echo "GOARCH=${{ matrix.arch }}" >> $env:GITHUB_ENV
        
    - name: Build for Windows ${{ matrix.arch }}
      run: |
        $version = "${{ github.event.inputs.version || github.ref_name || 'latest' }}"
        $buildTime = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
        
        New-Item -ItemType Directory -Path "build" -Force
        go build -ldflags "-X main.version=$version -X main.buildTime=$buildTime" -o "build/gateway-digiflazz-windows-${{ matrix.arch }}.exe" ./cmd/server
        
    - name: Test binary
      run: |
        .\build\gateway-digiflazz-windows-${{ matrix.arch }}.exe -help
        
    - name: Create archive
      run: |
        Compress-Archive -Path "build\gateway-digiflazz-windows-${{ matrix.arch }}.exe" -DestinationPath "build\gateway-digiflazz-windows-${{ matrix.arch }}.zip"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gateway-digiflazz-windows-${{ matrix.arch }}
        path: |
          build/gateway-digiflazz-windows-${{ matrix.arch }}.exe
          build/gateway-digiflazz-windows-${{ matrix.arch }}.zip

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]  # Both work on macOS runners
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      run: |
        go mod download
        go mod tidy
        
    - name: Set up CGO environment
      run: |
        echo "CGO_ENABLED=1" >> $GITHUB_ENV
        echo "GOOS=darwin" >> $GITHUB_ENV
        echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV
        
    - name: Build for macOS ${{ matrix.arch }}
      run: |
        VERSION="${{ github.event.inputs.version || github.ref_name || 'latest' }}"
        BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        mkdir -p build
        go build -ldflags "-X main.version=$VERSION -X main.buildTime=$BUILD_TIME" -o "build/gateway-digiflazz-darwin-${{ matrix.arch }}" ./cmd/server
        
    - name: Test binary
      run: |
        chmod +x build/gateway-digiflazz-darwin-${{ matrix.arch }}
        ./build/gateway-digiflazz-darwin-${{ matrix.arch }} -help
        
    - name: Create archive
      run: |
        tar -czf "build/gateway-digiflazz-darwin-${{ matrix.arch }}.tar.gz" -C build "gateway-digiflazz-darwin-${{ matrix.arch }}"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gateway-digiflazz-darwin-${{ matrix.arch }}
        path: |
          build/gateway-digiflazz-darwin-${{ matrix.arch }}
          build/gateway-digiflazz-darwin-${{ matrix.arch }}.tar.gz

  create-release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.version != '')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Check if tag exists
      run: |
        TAG_NAME="${{ github.event.inputs.version || github.ref_name }}"
        if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
          echo "Tag $TAG_NAME already exists"
          echo "TAG_EXISTS=true" >> $GITHUB_ENV
        else
          echo "Tag $TAG_NAME does not exist"
          echo "TAG_EXISTS=false" >> $GITHUB_ENV
        fi
        
    - name: Create tag if not exists
      if: env.TAG_EXISTS == 'false'
      run: |
        TAG_NAME="${{ github.event.inputs.version || github.ref_name }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
        git push origin "$TAG_NAME"
        
    - name: Create release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: Release ${{ github.event.inputs.version || github.ref_name }}
        body: |
          ## Digiflazz Gateway API Server
          
          ### Downloads
          - **Linux AMD64**: gateway-digiflazz-linux-amd64.tar.gz
          - **Windows AMD64**: gateway-digiflazz-windows-amd64.zip
          - **macOS AMD64**: gateway-digiflazz-darwin-amd64.tar.gz
          - **macOS ARM64**: gateway-digiflazz-darwin-arm64.tar.gz
          
          ### Usage
          ```bash
          # Linux
          tar -xzf gateway-digiflazz-linux-amd64.tar.gz
          ./gateway-digiflazz-linux-amd64 -help
          
          # Windows
          unzip gateway-digiflazz-windows-amd64.zip
          .\gateway-digiflazz-windows-amd64.exe -help
          
          # macOS
          tar -xzf gateway-digiflazz-darwin-amd64.tar.gz
          ./gateway-digiflazz-darwin-amd64 -help
          ```
        files: |
          **/*.tar.gz
          **/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        overwrite: true
